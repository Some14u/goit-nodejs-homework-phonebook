const fs = require("fs");
const path = require("path");
const { URL } = require("url");
const handlebars = require("handlebars");
const messages = require("../helpers/messages");
const settings = require("../helpers/settings");
const mailer = require("../repositories/mailer.repo");
const jwt = require("../repositories/jwt.repo");

class EmailService {
  from;

  constructor(from) {
    this.from = from;
    this.templates = {
      verification: this.#loadTemplate("verification"),
    };
  }

  /** Generates a token for the given email */
  generateVerificationToken(email) {
    console.log(
      "token generated",
      settings.authentication.jwt.lifeTime.emailVerification
    );
    return jwt.sign(
      { email },
      settings.authentication.jwt.lifeTime.emailVerification
    );
  }

  /**
   * Sends a verification email to the userEmail with link that activates
   * the user account. This internally uses [mailer repository](../repositories/mailer.repo.js)
   * to perform mailing operations.
   *
   * This used to advance email verification phase of registration.
   * @param {string} userEmail an email of the user, whose account is awaiting for verification
   * @param {string} token a token, generated by {@link generateVerificationToken}
   */
  sendVerificationEmail(userEmail, token) {
    const context = {
      appName: settings.appName,
      verificationUrl: this.#buildVerificationUrl(token),
    };
    return mailer.send(
      this.from,
      userEmail,
      messages.emailVerification.subject(settings.appName),
      this.templates.verification(context)
    );
  }

  /** Compiles hbs template for emails */
  #loadTemplate(name) {
    const filePath = path.join(
      process.cwd(),
      "app/views/emails",
      name + ".hbs"
    );
    const data = fs.readFileSync(filePath, "utf8");
    return handlebars.compile(data);
  }

  /** Builds the url for email verification procedure */
  #buildVerificationUrl(token) {
    const url = new URL(`http://${settings.domain}/users/verify/${token}`);
    if (settings.isDev) {
      url.hostname = "localhost";
      url.port = settings.serverPort;
    }
    return url.href;
  }
}

const emailService = new EmailService(
  // Set default "from" string for any sended email
  settings.authentication.emailVerificationFrom
);

module.exports = emailService;
